{
    "collab_server" : "",
    "contents" : "#Name of algorithm to use in grid search (gbm, randomForest, kmeans, glm, deeplearning, naivebayes, pca).\n\nlibrary(h2o)\nlibrary(ggplot2)\n\n\nh2o.init(nthreads = -1)\nh2o.clusterInfo()\n\noptions(scipen=20)\n#lendo cvs com todos os dados\ntotaldados <- read.csv(\"data/agregadoPorTemporadaSTATS.csv\", sep=\",\", stringsAsFactors=FALSE)\n\n\ntotaldados[is.na(totaldados)] <- 0\ntotaldados <- totaldados[totaldados$id_jogador > 0,]\n\ntotaldados[,c(\"posicao\")] <- as.factor(totaldados[,c(\"posicao\")])\n\n#totaldados$posicao <- as.factor(totaldados$posicao)\n#totaldados$violacao <- as.factor(totaldados$violacao)\n#totaldados$faltas_recebidas <- as.factor(totaldados$faltas_recebidas)\n\n#totaldados$posicaoInt <- as.integer(totaldados$posicao)\n#removendo jogadores de posicao nao definida\ntotaldados <- totaldados[totaldados$posicao != \"NOTFOUND\",]\n\n#separando dados de treino com todas as temporadas exceto as duas ultimas\ntreino = totaldados[totaldados$nome_temporada != \"T20142015\",]\ntreino = treino[treino$nome_temporada != \"T20152016\",]\n\n#separando dados de validacao com a penultima temporada\nvalidacao = totaldados[totaldados$nome_temporada == \"T20142015\",]\n#separando dados de teste com a ultima temporada\nteste = totaldados[totaldados$nome_temporada == \"T20152016\",]\n\n#0.6614173228346456\n\n\nx <- setdiff(names(totaldados), c(totaldados, \"idade\", \"id_jogador\",\"id_partida\", \"nome_temporada\", \"data_nascimento\", \"violacao\", \"faltas_recebidas\" ))  #retirando colunas nao necessarias ao processo\ny <- \"posicao\"\n\ntreino.hex  <- as.h2o(treino) # convertendo df para formato h2o\nteste.hex  <- as.h2o(teste) \nvalidacao.hex  <- as.h2o(validacao) \n\n#ver resumo dos dados de treino\nsummary(treino.hex, exact_quantiles=TRUE)\n\n#sumario tipo tabela\nh2o.table(treino.hex$posicao)\n\n\n#hyper_parameters = list(ntrees = ntrees_opts, learn_rate = learn_rate_opts)\n\n\nmax_depth_opts = c(3, 5, 9)\nsample_rate_opts = c(0.8, 1.0)\ncol_sample_rate_opts = c(0.2, 0.5, 1.0)\nntrees_opts = c(1, 50)\nlearn_rate_opts = c(0.1, 0.01)\n\nhyper_parametersGM = list(ntrees = ntrees_opts, learn_rate = learn_rate_opts, max_depth= max_depth_opts, sample_rate=sample_rate_opts, col_sample_rate=col_sample_rate_opts)\n\nsearch_criteriaGM = list(\n  ## Random grid search\n  strategy = \"RandomDiscrete\",      \n  \n  ## limit the runtime to 60 minutes\n  max_runtime_secs = 3600,         \n  \n  ## build no more than 100 models\n  max_models = 50,                  \n  \n  ## random number generator seed to make sampling of parameter combinations reproducible\n  seed = 1234,                        \n  \n  ## early stopping once the leaderboard of the top 5 models is converged to 0.1% relative difference\n  stopping_rounds = 5,                \n  stopping_metric = \"AUTO\",\n  stopping_tolerance = 0.001\n)\n\n\ngridGM <- h2o.grid(\"gbm\", grid_id=\"gbm_grid_test\", \n                 x=x, \n                 y=y, \n                 training_frame=treino.hex, \n                 validation_frame=validacao.hex,\n                 nfolds = 5,\n                 #weights_column = \"altura\",\n                 hyper_params = hyper_parametersGM,\n                 search_criteria = search_criteriaGM)\n\n\nglm_sorted_grid <- h2o.getGrid(grid_id = \"gbm_grid_test\", sort_by = \"accuracy\", decreasing = FALSE)\n\nprint(glm_sorted_grid)\n\n#grid_models <- lapply(grid@model_ids, function(mid) {\n#  model = h2o.getModel(mid)\n#})\n\n\n# Grab the model_id based in AUC\nbest_glm_model_id <- gridGM@model_ids[[1]]\n\n# The best model\nbest_glm <- h2o.getModel(best_glm_model_id)\n\n\n\n\nscoring_history <- as.data.frame(best_glm@model$scoring_history)\nplot(scoring_history$number_of_trees, scoring_history$training_MSE, type=\"p\") #training mse\n\n## get the actual number of trees\nntrees <- best_glm@model$model_summary$number_of_trees\nprint(ntrees)\n\n \n\nmy_varimpGM <- h2o.varimp(best_glm)\nbarplot(my_varimpGM$scaled_importance,\n        names.arg = my_varimpGM$variable,\n        space = 1,\n        las = 2,\n        main = \"Variable Importance: GM GRID\")\n\np <- ggplot(data = my_varimpGM, aes(x = variable, y =scaled_importance ))\n\np <- p + geom_bar(stat = \"identity\")\np <- p + coord_flip()\np\n\n\n\nmodel = best_glm\n\n\npred2 = h2o.predict(object = model, newdata = teste.hex)\n\ndataset_pred = as.data.frame(pred2)\n\nfinal <- cbind(dataset_pred, teste ) \n\nperf <- h2o.performance(model, teste.hex)\nh2o.confusionMatrix(perf)\n\n\n# Summary of the best model\nsummary(pred2, exact_quantiles=TRUE)\n\nmean(pred2$predict==teste.hex$posicao)\n\n\n#h2o.shutdown(prompt=FALSE)",
    "created" : 1498068579571.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2521132202",
    "id" : "98DB24D1",
    "lastKnownWriteTime" : 1498073054,
    "last_content_update" : 1498073054795,
    "path" : "C:/temp/MDM/MDM Predict 5p/scripts/gridGM.R",
    "project_path" : "scripts/gridGM.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}