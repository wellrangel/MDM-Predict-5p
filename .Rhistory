#score_validation_samples=10000, ## downsample validation set for faster scoring
#score_duty_cycle=0.025,         ## don't score more than 2.5% of the wall time
#adaptive_rate=F,                ## manually tuned learning rate
#momentum_start=0.5,             ## manually tuned momentum
#momentum_stable=0.9,
#momentum_ramp=1e7,
#l1=1e-5,
#l2=1e-5,
#activation=c("Rectifier"),
#max_w2=10,
nfolds = 10,
variable_importances=T
,hyper_params = hyper_parametersDP
)
dl_sorted_grid <- h2o.getGrid(grid_id = "dl_grid_test", sort_by = "accuracy", decreasing = FALSE)
print(dl_sorted_grid, exact_quantiles=TRUE)
# Grab the model_id based in AUC
best_dl_model_id <- gridDL@model_ids[[1]]
# The best model
best_dl <- h2o.getModel(best_dl_model_id)
print(h2o.performance(best_dl, valid=T))
my_varimpDL <- h2o.varimp(best_dl)
barplot(my_varimpDL$scaled_importance,
names.arg = my_varimpDL$variable,
space = 1,
las = 2,
main = "Variable Importance: DL GRID")
model = best_dl
# Summary of the best model
pred2 = h2o.predict(object = model, newdata = teste.hex)
dataset_pred <- as.data.frame(pred2)
sub_reg <- data.frame(id_jogador = teste$id_jogador,  id_partida = teste$id_partida, temporada = teste$nome_temporada, posicao =  dataset_pred$predict)
#final <- cbind(dataset_pred, teste )
#erro =  sqldf( "select * from final where predict != posicao")
perf <- h2o.performance(model, teste.hex)
h2o.confusionMatrix(perf)
mean(pred2$predict==teste.hex$posicao)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
gridDL <- h2o.grid("deeplearning",
grid_id="dl_grid_test",
x=x,
y=y,
training_frame=treino.hex,
validation_frame=validacao.hex,
#epochs=20,
seed = 1234,
#stopping_metric="misclassification",
#stopping_tolerance=1e-2,        ## stop when misclassification does not improve by >=1% for 2 scoring events
#stopping_rounds=2,
#score_validation_samples=10000, ## downsample validation set for faster scoring
#score_duty_cycle=0.025,         ## don't score more than 2.5% of the wall time
#adaptive_rate=F,                ## manually tuned learning rate
#momentum_start=0.5,             ## manually tuned momentum
#momentum_stable=0.9,
#momentum_ramp=1e7,
#l1=1e-5,
#l2=1e-5,
#activation=c("Rectifier"),
#max_w2=10,
nfolds = 10,
variable_importances=T
,hyper_params = hyper_parametersDP
)
dl_sorted_grid <- h2o.getGrid(grid_id = "dl_grid_test", sort_by = "accuracy", decreasing = TRUE)
print(dl_sorted_grid, exact_quantiles=TRUE)
gridDL <- h2o.grid("deeplearning",
grid_id="dl_grid_test",
x=x,
y=y,
training_frame=treino.hex,
validation_frame=validacao.hex,
#epochs=20,
seed = 1234,
#stopping_metric="misclassification",
#stopping_tolerance=1e-2,        ## stop when misclassification does not improve by >=1% for 2 scoring events
#stopping_rounds=2,
#score_validation_samples=10000, ## downsample validation set for faster scoring
#score_duty_cycle=0.025,         ## don't score more than 2.5% of the wall time
#adaptive_rate=F,                ## manually tuned learning rate
#momentum_start=0.5,             ## manually tuned momentum
#momentum_stable=0.9,
#momentum_ramp=1e7,
#l1=1e-5,
#l2=1e-5,
#activation=c("Rectifier"),
#max_w2=10,
nfolds = 10,
variable_importances=T
,hyper_params = hyper_parametersDP
)
dl_sorted_grid <- h2o.getGrid(grid_id = "dl_grid_test", sort_by = "accuracy", decreasing = TRUE)
print(dl_sorted_grid, exact_quantiles=TRUE)
gridDL
pred2 = h2o.predict(object = model, newdata = teste.hex)
pred2 = h2o.predict(object = model, newdata = teste.hex)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
#lendo cvs com todos os dados
totaldados <- read.csv("data/agregadoPorTemporadaSTATS.csv", sep=",", stringsAsFactors=FALSE)
totaldados[is.na(totaldados)] <- 0
totaldados <- totaldados[totaldados$id_jogador > 0,]
#todos jogadores com pelo menos 10 partidas por temporada
totaldados[,c("posicao")] <- as.factor(totaldados[,c("posicao")])
totaldados <- totaldados[totaldados$posicao != "NOTFOUND",]
validacao = totaldados[totaldados$nome_temporada == "T20142014" | totaldados$nome_temporada == "T20142015",]
View(validacao)
validacao = totaldados[totaldados$nome_temporada == "T20132014" | totaldados$nome_temporada == "T20142015",]
View(validacao)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
perf
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
dataset_pred
final <- cbind(dataset_pred, teste )
View(final)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
final <- cbind(dataset_pred, teste )
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/Normalizacao.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/AgregadoPorTemporada.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/ComputeAdvancedStats.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
if (!file.exists("dadosOriginalCSV")) {
dadosOriginalCSV <- readData();
}
treino <- getTreinoData(dadosOriginalCSV)
validacao <- getValidacaoData(dadosOriginalCSV)
teste <- getTesteData(dadosOriginalCSV)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
#strategy = "RandomDiscrete",
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial",
base_models = grid@model_ids)
grid
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial",
base_models =
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial",
base_models = grid@model_ids)
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial",
base_models = grid@model_ids)
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial",
base_models = grid@model_ids)
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial1",
base_models = grid@model_ids)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
#0.7272727
#0.6744186
#0.7209302 hoje de manha
#0.7209302 sem variaveis avancadas
#0.7325581 sem parametros
#0.7906977 com search
#0.7906977 com hyper parametros
#0.7906977 com 10 a 50 arvores
#0.7906977 com 10 fold
#0.7093023 com variaveis avancadas
#0.744186 100 folds
library(h2o)
library(ggplot2)
source("scripts/functions.R")
h2o.init(nthreads = -1)
options(scipen=20)
#nao ler toda hora
if (!file.exists("dadosOriginalCSV")) {
dadosOriginalCSV <- readData();
}
treino <- getTreinoData(dadosOriginalCSV)
validacao <- getValidacaoData(dadosOriginalCSV)
teste <- getTesteData(dadosOriginalCSV)
treino.hex  <- as.h2o(treino) # convertendo df para formato h2o
validacao.hex  <- as.h2o(validacao)
teste.hex  <- as.h2o(teste)
x <- setdiff(names(dadosOriginalCSV), c(dadosOriginalCSV,"posicao", "ts_per", "eFG_per","ASTPer", "TurPer", "FTPer", "FG_per", "PirPer", "minutos_partida", "idade", "id_jogador","id_partida", "data_nascimento", "violacao", "faltas_recebidas" ))  #retirando colunas nao necessarias ao processo
y <- "posicao"
hyper_parametersGM = list(
## restrict the search to the range of max_depth established above
#max_depth = seq(minDepth,maxDepth,1),
## more trees is better if the learning rate is small enough
## use "more than enough" trees - we have early stopping
ntrees = c(1,10),
## search a large space of row sampling rates per tree
sample_rate = seq(0.2,1,0.01),
## search a large space of column sampling rates per split
col_sample_rate = seq(0.2,1,0.01),
## search a large space of column sampling rates per tree
col_sample_rate_per_tree = seq(0.2,1,0.01),
## search a large space of how column sampling per split should change as a function of the depth of the split
col_sample_rate_change_per_level = seq(0.9,1.1,0.01),
## search a large space of the number of min rows in a terminal node
min_rows = 2^seq(0,log2(nrow(treino))-1,1),
## search a large space of the number of bins for split-finding for continuous and integer columns
nbins = 2^seq(4,10,1),
## search a large space of the number of bins for split-finding for categorical columns
nbins_cats = 2^seq(4,12,1),
## search a few minimum required relative error improvement thresholds for a split to happen
min_split_improvement = c(0,1e-8,1e-6,1e-4),
## try all histogram types (QuantilesGlobal and RoundRobin are good for numeric columns with outliers)
histogram_type = c("UniformAdaptive","QuantilesGlobal","RoundRobin")
)
search_criteriaGM = list(
## Random grid search
strategy = "RandomDiscrete",
## limit the runtime to 60 minutes
max_runtime_secs = 3600,
## build no more than 100 models
max_models = 100,
## random number generator seed to make sampling of parameter combinations reproducible
seed = 1234,
## early stopping once the leaderboard of the top 5 models is converged to 0.1% relative difference
stopping_rounds = 5,
stopping_metric = "AUTO",
stopping_tolerance = 1e-3
)
grid <- h2o.grid(
## hyper parameters
hyper_params = hyper_parametersGM,
## hyper-parameter search configuration (see above)
search_criteria = search_criteriaGM,
## which algorithm to run
algorithm = "gbm",
## identifier for the grid, to later retrieve it
grid_id="gbm_grid_test",
## standard model parameters
x=x,
y=y,
training_frame=treino.hex,
validation_frame=validacao.hex,
nfolds = 5,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE,
## learning rate annealing: learning_rate shrinks by 1% after every tree
## (use 1.00 to disable, but then lower the learning_rate)
#learn_rate_annealing = 0.99,
## early stopping based on timeout (no model should take more than 1 hour - modify as needed)
#max_runtime_secs = 3600,
## early stopping once the validation AUC doesn't improve by at least 0.01% for 5 consecutive scoring events
stopping_rounds = 5, stopping_tolerance = 1e-4,
## score every 10 trees to make early stopping reproducible (it depends on the scoring interval)
score_tree_interval = 10,
## base random number generator seed for each model (automatically gets incremented internally for each model)
seed = 1234
)
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial1",
base_models = grid@model_ids)
pred <- h2o.predict(ensemble, newdata = teste.hex)
mean(pred$predict==teste.hex$posicao)
## Sort the grid models by AUC
sortedGrid <- h2o.getGrid("gbm_grid_test", sort_by = "accuracy", decreasing = TRUE)
sortedGrid
glm_sorted_grid <- h2o.getGrid(grid_id = "gbm_grid_test", sort_by = "accuracy", decreasing = TRUE)
# Grab the model_id based in AUC
best_glm_model_id <- grid@model_ids[[1]]
# The best model
best_glm <- h2o.getModel(best_glm_model_id)
scoring_history <- as.data.frame(best_glm@model$scoring_history)
plot(scoring_history$number_of_trees, scoring_history$training_MSE, type="p") #training mse
## get the actual number of trees
ntrees <- best_glm@model$model_summary$number_of_trees
print(ntrees)
my_varimpGM <- h2o.varimp(best_glm)
barplot(my_varimpGM$scaled_importance,
names.arg = my_varimpGM$variable,
space = 1,
las = 2,
main = "Variable Importance: GM GRID")
p <- ggplot(data = my_varimpGM, aes(x = variable, y =scaled_importance ))
p <- p + geom_bar(stat = "identity")
p <- p + coord_flip()
p
model = best_glm
pred2 = h2o.predict(object = model, newdata = teste.hex)
dataset_pred <- as.data.frame(pred2)
sub_reg <- data.frame(id_jogador = teste$id_jogador,  id_partida = teste$id_partida, temporada = teste$nome_temporada, posicao =  dataset_pred$predict)
final <- cbind(dataset_pred, teste )
erro =  sqldf( "select * from final where predict != posicao")
perf <- h2o.performance(model, teste.hex)
h2o.confusionMatrix(perf)
# Summary of the best model
summary(pred2, exact_quantiles=TRUE)
#browser()
mean(pred2$predict==teste.hex$posicao)
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial1",
base_models = grid@model_ids)
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
training_frame = treino.hex,
model_id = "ensemble_gbm_grid_binomial2",
base_models = grid@model_ids)
ensemble
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
perf <- h2o.performance(model, teste.hex)
mean(pred2$predict==teste.hex$posicao)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
pred2
perf
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
min_rows
2^seq(0,log2(nrow(treino))-1,1),
2^seq(0,log2(nrow(treino))-1,1)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
perf
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridGM.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
perf
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
#h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_naivebayes.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
h2o.shutdown(prompt=FALSE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/gridDL.R', echo=TRUE)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
View(final)
source('~/Downloads/MDM 2/MDM Predict 5p/scripts/grid_RandomForest.R', echo=TRUE)
View(erro)
View(final)
View(final)
View(erro)
View(erro)
mean(final$Ala)
mean(final$AlaArmador)
mean(final$AlaPivo)
mean(final$Pivo)
mean(final$Armador)
pred2
sum(pred2$Armador)
pred2$Armador
sum(pred2[pred2$Armador,])
pred2[pred2$Armador,]
sum(0.04045349, 0.062504665, 0.01207324, 0.884251316, 0.0007172899)
sum(0.04045349, 0.062504665, 0.01207324, 0.81, 0.0007172899)
pred2
h2o.confusionMatrix(best_RF, valid = TRUE, metrics = 'accuracy')
pred2 = h2o.predict(object = model, newdata = teste.hex)
pred2
teste
perf
mean(final$Ala)
mean(final$AlaArmador)
mean(final$AlaPivo)
mean(final$Pivo)
mean(final$Armador)
final$Armador
perf
pred2
pivotable <- final$posicao == "pivo"
pivotable
pivotable <- final[final$posicao == "pivo",]
View(pivotable)
pivotable <- final[c("posicao") == "pivo",]
final
c("posicao")
final$posicao
pivotable <- final[final$posicao == "Pivo",]
View(pivotable)
mean(pred2$predict==pivotable$posicao)
mean(pivotable$predict==pivotable$posicao)
View(pivotable)
pred2
perf
View(erro)
View(final)
