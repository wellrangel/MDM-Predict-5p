
Starting H2O JVM and connecting: .... Connection successful!

R is connected to the H2O cluster: 
    H2O cluster uptime:         5 seconds 52 milliseconds 
    H2O cluster version:        3.10.4.6 
    H2O cluster version age:    2 months and 6 days  
    H2O cluster name:           H2O_started_from_R_wellrangel_agr565 
    H2O cluster total nodes:    1 
    H2O cluster total memory:   0.89 GB 
    H2O cluster total cores:    4 
    H2O cluster allowed cores:  4 
    H2O cluster healthy:        TRUE 
    H2O Connection ip:          localhost 
    H2O Connection port:        54321 
    H2O Connection proxy:       NA 
    H2O Internal Security:      FALSE 
    R Version:                  R version 3.3.3 (2017-03-06) 


> options(scipen=20)

> #nao ler toda hora
> if (!file.exists("dadosOriginalCSV")) {
+   dadosOriginalCSV <- readData();
+   
+ }

> treino <- getTreinoData(dadosOriginalCSV)

> validacao <- getValidacaoData(dadosOriginalCSV)

> teste <- getTesteData(dadosOriginalCSV)

> treino.hex  <- as.h2o(treino) # convertendo df para formato h2o
  |=======================================================================================================| 100%

> validacao.hex  <- as.h2o(validacao) 
  |=======================================================================================================| 100%

> teste.hex  <- as.h2o(teste) 
  |=======================================================================================================| 100%

> x <- setdiff(names(dadosOriginalCSV), c(dadosOriginalCSV,"posicao", "minutos_partida", "pontos_time_casa","pontos_time_fora", "idade", "id_jogador", .... [TRUNCATED] 

> y <- "posicao"

> hyper_parametersGM = list( 
+   ## restrict the search to the range of max_depth established above
+   #max_depth = seq(minDepth,maxDepth,1),        .... [TRUNCATED] 

> search_criteriaGM = list(
+   ## Random grid search
+   strategy = "RandomDiscrete",      
+   
+   ## limit the runtime to 60 minutes
+   max_runti .... [TRUNCATED] 

> grid <- h2o.grid(
+   ## hyper parameters
+   hyper_params = hyper_parametersGM,
+   
+   ## hyper-parameter search configuration (see above)
+   se .... [TRUNCATED] 
  |=======================================================================================================| 100%

> ## Sort the grid models by AUC
> sortedGrid <- h2o.getGrid("gbm_grid_test", sort_by = "accuracy", decreasing = TRUE)    

> sortedGrid
H2O Grid Details
================

Grid ID: gbm_grid_test 
Used hyper parameters: 
  -  col_sample_rate 
  -  col_sample_rate_change_per_level 
  -  col_sample_rate_per_tree 
  -  histogram_type 
  -  min_rows 
  -  min_split_improvement 
  -  nbins 
  -  nbins_cats 
  -  ntrees 
  -  sample_rate 
Number of models: 97 
Number of failed models: 0 

Hyper-Parameter Search Summary: ordered by decreasing accuracy
  col_sample_rate col_sample_rate_change_per_level col_sample_rate_per_tree  histogram_type min_rows
1            0.95                             1.03                     0.29 UniformAdaptive      8.0
2            0.71                              0.9                     0.37 UniformAdaptive      2.0
3            0.75                             0.99                      0.8 UniformAdaptive      4.0
4            0.45                             1.03                     0.79      RoundRobin      4.0
5            0.62                             0.96                     0.68      RoundRobin      8.0
  min_split_improvement nbins nbins_cats ntrees sample_rate              model_ids           accuracy
1                1.0E-4    32         16     50         0.7 gbm_grid_test_model_12 0.7300531914893618
2                1.0E-8    32       1024     50        0.92 gbm_grid_test_model_37 0.7287234042553192
3                   0.0    64       1024     50         0.5  gbm_grid_test_model_7 0.7234042553191489
4                1.0E-6    32       4096     50        0.55 gbm_grid_test_model_54 0.7234042553191489
5                   0.0  1024         64     50        0.96 gbm_grid_test_model_76 0.7234042553191489

---
   col_sample_rate col_sample_rate_change_per_level col_sample_rate_per_tree  histogram_type min_rows
92             0.5                             1.02                     0.65      RoundRobin    128.0
93             0.7                             0.92                     0.26      RoundRobin     64.0
94             0.2                             0.94                     0.49 QuantilesGlobal     64.0
95             0.5                             1.03                     0.45      RoundRobin    256.0
96            0.45                             1.06                     0.28 UniformAdaptive     64.0
97            0.42                             1.08                     0.45      RoundRobin    256.0
   min_split_improvement nbins nbins_cats ntrees sample_rate              model_ids           accuracy
92                   0.0    32         64     10        0.64  gbm_grid_test_model_0 0.5970744680851063
93                1.0E-6    16       1024     10        0.42 gbm_grid_test_model_84 0.5904255319148937
94                1.0E-8   128        512     10         0.4 gbm_grid_test_model_28 0.5811170212765957
95                   0.0    16         16     10        0.28 gbm_grid_test_model_58 0.5757978723404256
96                1.0E-8  1024       1024     10        0.28 gbm_grid_test_model_92 0.5757978723404256
97                1.0E-4    64       2048     10        0.35 gbm_grid_test_model_16 0.5731382978723405

> glm_sorted_grid <- h2o.getGrid(grid_id = "gbm_grid_test", sort_by = "accuracy", decreasing = TRUE)

> # Grab the model_id based in AUC
> best_glm_model_id <- grid@model_ids[[1]]

> # The best model
> best_glm <- h2o.getModel(best_glm_model_id)

> scoring_history <- as.data.frame(best_glm@model$scoring_history)

> plot(scoring_history$number_of_trees, scoring_history$training_MSE, type="p") #training mse

> my_varimpGM <- h2o.varimp(best_glm)

> barplot(my_varimpGM$scaled_importance,
+         names.arg = my_varimpGM$variable,
+         space = 1,
+         las = 2,
+         main = "Variabl ..." ... [TRUNCATED] 

> p <- ggplot(data = my_varimpGM, aes(x = variable, y =scaled_importance ))

> p <- p + geom_bar(stat = "identity")

> p <- p + coord_flip()

> p

> model = best_glm

> pred2 = h2o.predict(object = model, newdata = teste.hex)
  |=======================================================================================================| 100%

> dataset_pred <- as.data.frame(pred2)

> sub_reg <- data.frame(id_jogador = teste$id_jogador,  id_partida = teste$id_partida, temporada = teste$nome_temporada, posicao =  dataset_pred$predi .... [TRUNCATED] 

> final <- cbind(dataset_pred, teste ) 

> #erro =  sqldf( "select * from final where predict != posicao")
> 
> perf <- h2o.performance(model, teste.hex)

> h2o.confusionMatrix(perf)
Confusion Matrix: vertical: actual; across: predicted
           Ala AlaArmador AlaPivo Armador Pivo  Error       Rate
Ala         28          1       2       2    2 0.2000 =   7 / 35
AlaArmador   6          7       0       0    0 0.4615 =   6 / 13
AlaPivo      6          0      10       0    5 0.5238 =  11 / 21
Armador      4          2       0      19    0 0.2400 =   6 / 25
Pivo         1          0       2       0   24 0.1111 =   3 / 27
Totals      45         10      14      21   31 0.2727 = 33 / 121

> # Summary of the best model
> summary(pred2, exact_quantiles=TRUE)
 predict        Ala                AlaArmador          AlaPivo            Armador            Pivo               
 Ala       :45  Min.   :0.001544   Min.   :0.0009086   Min.   :0.001079   Min.   :0.001052   Min.   :0.0008245  
 Pivo      :31  1st Qu.:0.016907   1st Qu.:0.0111274   1st Qu.:0.011652   1st Qu.:0.012178   1st Qu.:0.0120098  
 Armador   :21  Median :0.203022   Median :0.0251675   Median :0.041515   Median :0.032073   Median :0.0356685  
 AlaPivo   :14  Mean   :0.309818   Mean   :0.1071597   Mean   :0.133726   Mean   :0.196104   Mean   :0.2531919  
 AlaArmador:10  3rd Qu.:0.581118   3rd Qu.:0.1349670   3rd Qu.:0.164273   3rd Qu.:0.164562   3rd Qu.:0.3889337  
                Max.   :0.975100   Max.   :0.7491775   Max.   :0.815644   Max.   :0.991868   Max.   :0.9924008  

> #browser()
> 
> 
> 
> mean(pred2$predict==teste.hex$posicao)
[1] 0.7272727

> h2o.shutdown(prompt=FALSE)
[1] TRUE

> #return (mean(pred2$predict==teste.hex$posicao))
> 
> #}